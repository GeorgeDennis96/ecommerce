@page "/admin/products"
@using BlazorEcommerce.Shared.Models.Product.Admin;

@inject HttpClient Http
@inject IProductService ProductService

<div class="container">
    <h3>Product Management</h3>
</div>



@if (ProductService.AdminProducts == null || ProductService.AdminProducts.Count == 0)
{
    <div class="col-12 container product-load-notification">
        <div class="row-12"></div>
        <div class="spinner-border text-light" role="status">
            <span class="sr-only">Loading...</span>
        </div>
        <div class="row-12">
            <span>Loading Products...</span>
        </div>
    </div>
}
else
{
    <table class="table table-dark container">
        <thead>
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Title</th>
                <th scope="col">Description</th>
                <th scope="col">URL</th>
                <th scope="col">Price</th>
                <th scope="col">Manage</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in ProductService.AdminProducts)
            {
                <tr>
                    <th scope="row">@prod.Id</th>
                    <td>@prod.Title</td>
                    <td>@ShortenDescription(prod.Description)</td>
                    <td>@prod.ImageUrl</td>
                    <td>£@prod.Price</td>
                    <td><button type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#exampleModalCenter" @onclick="() => SetupModalForEdit(prod)">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>


    <!-- Edit Product Modal -->
    <div class="modal fade" id="exampleModalCenter" style="border:thin; border-color:black;" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" style="" role="document">
            <div class="modal-content" style="background-color:#202529">
                @if (productToEdit != null)
                {
                    <div class="modal-header">
                        <h5 class="modal-title" style="" id="exampleModalLongTitle">@productToEdit.Title</h5>
                    </div>
                    <div class="modal-body">
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="option1">
                            <label class="form-check-label" for="inlineCheckbox1">Avaliable</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Save changes</button>
                    </div>
                }
                else
                {
                    <div class="modal-body">
                        <span>Sorry but there was an error... please try again.</span>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                }
            </div>
        </div>
    </div>

}

@code {

    AdminProduct? productToEdit;

    private int DescriptionDisplayLength = 20;

    protected override async Task OnInitializedAsync()
    {
        await ProductService.AdminGetProducts();
    }

    public string ShortenDescription(string description)
    {
        if (description.Length > DescriptionDisplayLength)
        {
            return description.Remove(DescriptionDisplayLength, description.Length - DescriptionDisplayLength) + "...";
        }
        else
        {
            return description;
        }
    }

    public void SetupModalForEdit(AdminProduct product)
    {
        productToEdit = product;
    }
}
